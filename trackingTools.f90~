module trackingTools
! This is a key module for particleTracking.f90 code. It contains
! *)	all derived-type declarations used in the codes
! *)	particle allocation and creation routines
! More info: matjaz.licer@mbss.org

    implicit none
    
! define derived types:-----------------------------
	type grid
		integer          :: nLon
		integer          :: nLat
		integer          :: nLevels
		real             :: resolution     
		real, allocatable            :: lons(:)
		real, allocatable            :: lats(:)
		real, allocatable             :: levels(:)
		real, allocatable             :: lon2(:,:)
		real, allocatable             :: lat2(:,:)     
		real, allocatable             :: lsm(:,:,:)
	end type grid

	type particle
		integer, allocatable         :: dates(:)
		integer         :: numOfExistingParticles
		integer, allocatable         :: hourOfBirth(:)
		logical, allocatable         :: active(:)     
		real, allocatable            :: levels(:,:)
		real, allocatable            :: mass(:,:)
		real, allocatable            :: evapPercentage(:,:)     
		real, allocatable            :: lats(:,:)
		real, allocatable            :: lons(:,:)
	end type particle

	type velocity
		real, allocatable :: u(:,:,:,:)
		real, allocatable :: v(:,:,:,:)
		real, allocatable :: w(:,:,:,:)    
	end type velocity

	type spill
		real,allocatable :: pollutantConcentration(:,:,:,:)
		character*20     :: oilType
	end type spill

	type ocean  
		real, allocatable             :: T(:,:,:,:)
		real, allocatable             :: S(:,:,:,:)
		real, allocatable             :: RHO(:,:,:,:)
		real, allocatable             :: HorizontalDiffusivity(:,:,:,:)     
		real, allocatable             :: VerticalDiffusivity(:,:,:,:)          
		type(velocity)   :: current
	end type ocean

	type atmosphere  
		real, allocatable             :: T2m(:,:,:)
		real, allocatable             :: UWND(:,:,:)
		real, allocatable             :: VWND(:,:,:)
	end type atmosphere

	type init
		integer :: modelRuntimeInHours, dt
		integer :: numHoursOfTracking
		integer :: releaseDuration
		integer :: numberOfParticles
		integer :: numCreatedParticlesPerStep
		real :: totalMass
		integer :: oilIndex
		integer :: level
		integer :: sign_t
		real    :: lat0,lon0, Dh
		character*10 :: startdate,enddate
		integer :: numOfExistingFiles
		integer,allocatable :: hourReadStart(:)
		integer,allocatable :: hourReadEnd(:)
		character*255,allocatable :: existingFiles(:)
		character*255 :: model
		logical :: performBacktracking
		logical :: tracking3D		
	end type init

	integer :: modelRuntimeInHours, dt
	integer :: numHoursOfTracking
	integer :: releaseDuration
	integer :: numberOfParticles
	integer :: numCreatedParticlesPerStep
	real :: totalMass
	integer :: oilIndex
	integer :: level
	integer :: sign_t
	real    :: lat0,lon0, Dh
	character*10 :: startdate,enddate
	integer :: numOfExistingFiles
	integer,allocatable :: hourReadStart(:)
	integer,allocatable :: hourReadEnd(:)
	character*255,allocatable :: existingFiles(:)
	character*255 :: model
	logical :: performBacktracking
	logical :: tracking3D	

! declare IO namelists: -------------------------------------------
    namelist /initialParameters/ model,modelRuntimeInHours,&
	dt,numHoursOfTracking,releaseDuration,performBacktracking,&
	numberOfParticles,numCreatedParticlesPerStep,totalMass,&
	oilIndex,Dh,numOfExistingFiles,lat0,lon0,&
	level,tracking3D,sign_t,startdate,enddate
	
	namelist/files/existingFiles
	
	namelist/startTimes/hourReadStart
	
	namelist/endTimes/hourReadEnd
	
! declare variables: -------------------------------------------
	type(grid) :: ncgrid
	type(particle) :: particles
	type(velocity) :: current
	type(ocean) :: sea	
    type(spill) :: slick
	type(init) :: setup
! subroutines ----------------------------------------------------------
! subroutines ----------------------------------------------------------
! subroutines ----------------------------------------------------------

contains

 ! ------------------------handle NC errors ----------------------------

subroutine handle_err(istatus)
use netcdf
implicit none
integer, intent(in) :: istatus

IF (istatus .NE. NF90_NOERR) THEN
   print *, 'NetCDF fail:'
   print *,'ERROR CODE: ', trim(nf90_strerror(istatus))
   stop
ENDIF

RETURN
end subroutine handle_err


subroutine allocateArrays
	implicit none
    if(.not.allocated(particles%dates)) allocate(particles%dates(setup%numHoursOfTracking))
    if(.not.allocated(particles%levels))allocate(particles%levels(setup%numHoursOfTracking,setup%numberOfParticles))
    if(.not.allocated(particles%lats))allocate(particles%lats(setup%numHoursOfTracking,setup%numberOfParticles))
    if(.not.allocated(particles%lons))allocate(particles%lons(setup%numHoursOfTracking,setup%numberOfParticles))
    if(.not.allocated(particles%mass))allocate(particles%mass(setup%numHoursOfTracking,setup%numberOfParticles))
    if(.not.allocated(particles%evapPercentage))allocate(particles%evapPercentage(setup%numHoursOfTracking,setup%numberOfParticles))    
    if(.not.allocated(particles%hourOfBirth))allocate(particles%hourOfBirth(setup%numberOfParticles))        
    particles%numOfExistingParticles = 0
end subroutine allocateArrays




 ! -------------------------create particles ---------------------------

  subroutine createParticles(t)
    implicit none

!    type(grid) :: ncgrid
    integer :: i, imax, t
    real, allocatable :: random_vector(:)

        
    if(.not.allocated(random_vector))allocate(random_vector(setup%numberOfParticles))


    call random_number(random_vector)

    if (t.lt.setup%releaseDuration) then
        imax = setup%numCreatedParticlesPerStep
    else
        imax = setup%numberOfParticles-(t-1)* setup%numCreatedParticlesPerStep
    endif


    do i=1,imax
        particles%lats(t,(t-1)* setup%numCreatedParticlesPerStep+i)=&
        setup%lat0 + 0.25*ncgrid%resolution*random_vector(i)
        
        particles%lons(t,(t-1)* setup%numCreatedParticlesPerStep+i)=&
        setup%lon0 + 0.25*ncgrid%resolution*random_vector(i)

        particles%levels(t,(t-1)* setup%numCreatedParticlesPerStep+i)=&
        setup%level
        
        particles%hourOfBirth((t-1)* setup%numCreatedParticlesPerStep+i) = t
        
        particles%mass(t,(t-1)* setup%numCreatedParticlesPerStep+i) = &
        setup%totalMass/setup%numberOfParticles
    enddo
    
    particles%numOfExistingParticles = &
    particles%numOfExistingParticles + imax

	
  end subroutine createParticles
end module trackingTools
